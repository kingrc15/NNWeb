<!DOCTYPE html>
<html>
<meta charset="utf-8">
<body>
	<style>
		.dropdown {
			position: relative;
			display: inline-block;
			border: solid;
		}
		.dropdown-content {
			display: none;
			position: absolute;
			background: gray;
			min-width: 160px;
			box-shadow: 0px 4px 8px 0px rgba(0,0,0,0.2);
			padding: 12px 16px;
			z-index: 1;
		}
		.dropdown:hover .dropdown-content {
			display: block;
		}
	    .line {
	        border-bottom: 1px solid green;
	        position: fixed;
	        z-index: -1;
	        text-align: center;
	        transform-origin: center center;
	    }
	    .dot {
	    	width: 50px;
	    	height: 50px;
	    	background-color: yellow;
	    	border-radius: 100%;
	    	display: inline-block;
	    	position: fixed;
	    	text-align: center;
	    	line-height: 50px;
		    }
	</style>

	<div class="dropdown">
		<span>Layer Type</span>
		<div class="dropdown-content">
			<p>Sigmoid</p>
			<p>TanH</p>
			<p>ReLU</p>
			<p>Drop Out</p>
		</div>
	</div>

	<div class = line1></div>

	<script>
		class Net{
			constructor(trainingInputs, trainingOutputs){
				this.buffer = 75;
				this.ySpacing = 100;
				this.xSpacing = 200;
				this.trainingInputs = trainingInputs;
				this.trainingOutputs = trainingOutputs;
				this.layers = ['Sigmoid','Sigmoid'];
				this.sizes = [5,4,3];
				this.maxLayer =  Math.max.apply(null,this.sizes);
				this.createLayers();
				this.feedforward();
			}

			feedforward(){
				console.log(document.getElementById("Layer1").weights)
			}

			createLayers(){
				for (var x = 0; x < this.sizes.length; x++){
					this.layer = document.createElement("div");
					this.layer.id = "Layer" + x
					if (x != 0){
						this.layer.biases = []
						this.layer.weights = []
					}
					for (var y = 0; y < this.sizes[x]; y++){
						this.node = document.createElement("div");
						this.node.className = "dot";
						this.node.style.top = y * this.ySpacing + (this.maxLayer - this.sizes[x]) * this.ySpacing / 2 + this.buffer + 'px';
						this.node.style.left = this.xSpacing * x + this.buffer + 'px';
						this.node.weights = [];
						this.node.id = "Node" + (x + 1) + (y + 1);
						if(x != 0){
							this.node.bias = Math.random();
							this.layer.biases.push(this.node.bias);
							this.node.innerHTML = this.node.bias.toFixed(2);
							for (var z = 0; z < this.sizes[x-1]; z++){
								var tmp = document.getElementById("Node" + (x) + (z + 1));
								var tmpX = tmp.style.left.replace(/px/,"") - 25;
								var tmpY = parseFloat(tmp.style.top.replace(/px/,"")) + 25;
								var X = this.node.style.left.replace(/px/,"") - 25;
								var Y = parseFloat(this.node.style.top.replace(/px/,"")) + 25;
								this.node.weights.push(Math.random());
								this.node.weight = document.createElement("div");
								this.node.weight.className = "line";
								this.node.weight.id = "weight" + x + z + y;
								this.node.weight.style.width = Math.sqrt(Math.pow(X - tmpX,2) + Math.pow(Y - tmpY,2)) + 'px';
								this.node.weight.style.transform = "rotate(" + Math.atan((Y - tmpY)/(X - tmpX))*180/3.14159 + "deg)";
								this.node.weight.style.top = (Y  + tmpY)/2 - 25 + 'px';
								this.node.weight.style.left = (X + tmpX)/2 - Math.abs(Math.atan((Y - tmpY)/(X - tmpX))*180/3.14159) * 2.25 + 'px';
								this.node.weight.innerHTML = this.node.weights[z].toFixed(2)
								document.body.appendChild(this.node.weight);
							}
							this.layer.weights.push(this.node.weights);
						}
						this.layer.appendChild(this.node);
					}
					document.body.appendChild(this.layer);
				}
				this.drawWeights();
			}
			drawWeights(){
				for (var x = 0; x < this.sizes.length; x++){
					for (var y = 0; y < this.sizes[x]; y++){
						for (var z = 0; z < this.sizes[x-1]; z++){
							var nTmp = document.getElementById("Node" + (x + 1) + (y + 1))
							var wTmp = document.getElementById("weight" + x + z + y)
							wTmp.style.opacity = nTmp.weights[z]
							if (nTmp.weights[z] < 0){
								wTmp.style.color = "red";
							} else {
								wTmp.style.color = "green";
							}
						}

					}
				}
			}
		}

		trainingInputs = [[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7],[4,5,6,7,8]]
		trainingOutputs = [[1,2,3],[2,3,4],[3,4,5],[4,5,6]]

		net = new Net(trainingInputs,trainingInputs)
	</script>
</body>
</html>